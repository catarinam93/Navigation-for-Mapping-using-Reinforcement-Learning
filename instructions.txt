Navigation for Mapping Using Reinforcement Learning

Operating Systems Compatibility:
- This project is compatible with the Windows operating system.

Dependencies:
- Python 3.10.11
- The following Python modules are required:
  - absl-py==2.1.0
  - cloudpickle==3.0.0
  - contourpy==1.2.1
  - cycler==0.12.1
  - Farama-Notifications==0.0.4
  - filelock==3.14.0
  - fonttools==4.51.0
  - fsspec==2024.5.0
  - grpcio==1.64.1
  - gymnasium==0.29.1
  - intel-openmp==2021.4.0
  - Jinja2==3.1.4
  - kiwisolver==1.4.5
  - Markdown==3.6
  - MarkupSafe==2.1.5
  - matplotlib==3.9.0
  - mkl==2021.4.0
  - mpmath==1.3.0
  - networkx==3.3
  - numpy==1.26.4
  - packaging==24.0
  - pandas==2.2.2
  - pillow==10.3.0
  - protobuf==4.25.3
  - pyparsing==3.1.2
  - python-dateutil==2.9.0.post0
  - pytz==2024.1
  - PyYAML==6.0.1
  - six==1.16.0
  - stable_baselines3==2.3.2
  - sympy==1.12
  - tbb==2021.12.0
  - tensorboard==2.17.0
  - tensorboard-data-server==0.7.2
  - torch==2.3.0
  - typing_extensions==4.11.0
  - tzdata==2024.1
  - Werkzeug==3.0.3

Instructions:
1. Ensure you have Python 3 installed on your system.
2. Install Webots simulation environment.
3. Install the dependencies listed above.
4. Open the project in any Python IDE of your choice (we recommend using PyCharm).
5. Navigate to the "worlds" folder in the project directory, which contains the environment worlds for Webots simulation.
6. Open the desired world file in Webots to observe the environment.
7. Run the desired reinforcement learning algorithm script (ppo_main.py, sac_main.py, a2c_main.py) to train the navigation agent.
8. While training the navigation agent, you can observe its behavior by running the simulation in Webots.
9. After training your models, to test the performance of PPO, A2C, and SAC trained models, follow these steps:
    a. Choose the desired environment map you want to test the models on.
    b. Inside the `test.py` script, ensure that you select the most recent model file (e.g., `10.zip`) for each respective algorithm (PPO, A2C, SAC).
    c. Run the script and visualize the generated maps for each algorithm.

